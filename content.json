{"pages":[],"posts":[{"title":"Vue SSR 解决不同终端渲染不同页面的问题","text":"随着技术的发展，现如今的网页越来越注意用户体验，设计上也越来越炫酷，对于我们开发的要求也越来越高。由于移动端和pc端在尺寸大小、分辨率、网速等方面的不同，对于同一个页面来说，很有可能移动端和pc端上的视觉呈现大相径庭，在日常的开发过程中，我们很有可能收到两份设计稿，一份pc端的，一份移动端的，如果这两个设计稿在视觉上的差异非常非常大，导致在同一个页面上做响应式适配变得非常复杂和繁琐，那么提取公共的组件和方法，然后直接根据不同终端分别开发会是一个不错的选择。 在改版我们原创馆官网的时候遇到过这个需求，这个项目是用Vue.js 开发的，同时也用了Vue SSR 进行的前后端同构，那么我们来模拟下这个问题，在不同终端渲染不同的页面，关键点是在组件里判断终端，简单粗暴的可以直接用userAgent来判断，有同学说这很easy 啊！ Home.vue 12345678910111213141516171819202122&lt;template&gt; &lt;div id=\"home\"&gt; &lt;mobile-page v-if=\"isMobile\"&gt;&lt;/mobile-page&gt; &lt;pc-page v-else&gt;&lt;/pc-page&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import PcPage from './PcPage' import MobilePage from './MobilePage' export default { components : { PcPage, MobilePage }, data(){ return { isMobile : process.env.VUE_ENV === 'client' ? /mobile/.test(window.navigator.userAgent.toLowerCase()) : null } } }&lt;/script&gt; PcPage.vue 12345&lt;template&gt; &lt;div id=\"pc-page\"&gt; pc page &lt;/div&gt;&lt;/template&gt; MobilePage.vue 12345&lt;template&gt; &lt;div id=\"mobile-page\"&gt; mobile page &lt;/div&gt;&lt;/template&gt; 看起来的确是这样的，但是实际上还是出现了问题： 当刷新页面的时候，会出现“跳一下”的现象，先显示 “pc page”，然后迅速显示“mobile page”，这在用户体验上其实是非常不好。为什么会出现这种现象呢？其实也很好理解，server端由于没有window、document这些对象，所以是无法访问navigation的，直接访问会报错，所以用Vue SSR 直出的server 端返回的isMobile 值是null，客户端则可以返回正确的isMobile 值，相当于浏览器先渲染server端的代码，再根据前端代码进行调整。 那么如何在server 端获取正确的 isMobile 值呢？其实可以想到请求页面时请求头里是会发送userAgent的，那么只需要在server 端根据请求头里的userAgent 判断一下，然后再发送给Vue.js 渲染即可。 经过不懈的翻看Vue SSR文档，终于找到了一个叫 ssrContext 可以完成发送数据到组件渲染的任务。 server.js 123456789101112131415const context = { title: 'a template for vue ssr', // default title url: req.url, //注意这里 isMobile: /mobile/.test(req.headers['user-agent'].toLowerCase()) } renderer.renderToString(context, (err, html) =&gt; { if (err) { return handleError(err) } res.send(html) if (!isProd) { console.log(`whole request: ${Date.now() - s}ms`) }}) Home.vue 12345data(){ return { isMobile : process.env.VUE_ENV === 'client' ? /mobile/.test(window.navigator.userAgent.toLowerCase()) : this.$ssrContext.isMobile }} 搞定，此时无论怎么暴力刷新移动端的页面，都不会出现“跳一下”的现象。","link":"/2018/02/28/Vue SSR 解决不同终端渲染不同页面的问题/"}],"tags":[{"name":"Vue.js","slug":"Vue-js","link":"/tags/Vue-js/"},{"name":"Vue-SSR","slug":"Vue-SSR","link":"/tags/Vue-SSR/"}],"categories":[]}